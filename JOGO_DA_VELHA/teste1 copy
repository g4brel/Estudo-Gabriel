
import PySimpleGUI as sg


jogo_da_velha = "X"  # Começa com X
layout = []
teste = 0

Matriz_invisível = [
    [None, None, None],
    [None, None, None],
    [None, None, None]
]

#Retorno alterado pelo professor -----------------------------------------------------
def verificar_vencedor():
    global Matriz_invisível

    for i in range(3):
        # Vitória por linha
        if Matriz_invisível[i][0] == Matriz_invisível[i][1] == Matriz_invisível[i][2] and Matriz_invisível[i][0] is not None:
            return [(i, j) for j in range(3)], 'linha'  # Retorna as coordenadas da linha vencedora e tipo
        
        # Vitória por coluna
        if Matriz_invisível[0][i] == Matriz_invisível[1][i] == Matriz_invisível[2][i] and Matriz_invisível[0][i] is not None:
            return [(j, i) for j in range(3)], 'coluna'  # Retorna as coordenadas da coluna vencedora e tipo

    # Verificar diagonais
    if Matriz_invisível[0][0] == Matriz_invisível[1][1] == Matriz_invisível[2][2] and Matriz_invisível[0][0] is not None:
        return [(i, i) for i in range(3)], 'diagonal principal'  # Diagonal principal e tipo
    if Matriz_invisível[0][2] == Matriz_invisível[1][1] == Matriz_invisível[2][0] and Matriz_invisível[0][2] is not None:
        return [(i, 2 - i) for i in range(3)], 'diagonal oposta'  # Diagonal secundária e tipo

    return None, None  # Nenhum vencedor ainda

def verificar_empate():
    return all(cell is not None for row in Matriz_invisível for cell in row)

def destacar_vencedor(coordenadas):
    for (row, col) in coordenadas:
        window[row * 3 + col].update(button_color=('white', 'green'))  # Destaca o botão vencedor

# Criar botões
for a in range(3):
    linha = []
    for b in range(3):
        linha.append(sg.Button('', size=(6, 3), key=teste))
        teste += 1
    layout.append(linha)
# saber de quem e a ves 
layout.append([sg.Text(f"Vez do jogador: {jogo_da_velha}", key="vez_jogador", size=(20, 1), font=("Helvetica", 16))])


# Criar a Janela
window = sg.Window('Jogo da Velha', layout)


# Loop de eventos
while True:
    event, values = window.read()

    # Se o usuário fechar a janela
    if event == sg.WIN_CLOSED:
        break

    # Verifica se o botão clicado é um dos botões do jogo
    if isinstance(event, int):  # Se o evento for um inteiro (um botão do jogo)
        # Verifica se a posição já está ocupada
        if Matriz_invisível[event // 3][event % 3] is None:
            # Atualiza o botão clicado
            window[event].update(jogo_da_velha)

            # Atualiza a matriz invisível
            Matriz_invisível[event // 3][event % 3] = jogo_da_velha

            # Verifica se há um vencedor
            coordenadas_vencedor, tipo_vencedor = verificar_vencedor()
            if coordenadas_vencedor:
                destacar_vencedor(coordenadas_vencedor)
                sg.popup(f'Jogador {jogo_da_velha} venceu por {tipo_vencedor}!')
                break  # Sai do loop após um vencedor

            # Verifica se há um empate
            if verificar_empate():
                sg.popup('Empate!')
                break  # Sai do loop após um empate

            # Troca o jogador
            jogo_da_velha = 'O' if jogo_da_velha == 'X' else 'X' 

            window['vez_jogador'].update(f"Vez do jogador: {jogo_da_velha}")





window.close()